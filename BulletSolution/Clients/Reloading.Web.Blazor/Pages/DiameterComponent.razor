@using BulletLibrary
@using BulletLibrary.Interfaces
@using Reloading.Services.EF
@using Reloading.Web.Blazor.Data
@using System.Linq;

@inject IMeasurementService MeasurementService

@if (diameters == Enumerable.Empty<Diameter>())
{
    <p><em>Loading...</em></p>
}
    else
{
    <div>
         
          <label style="float:left;" type="text"> Diameter: </label>
      

        <input type="text" @bind="@diameterValue" @oninput="@((e) => { diameterValue=(string)e.Value;})"/>
         <button type="submit" @onclick="AddNewDiameter">Submit</button>

        <select class="form-control" @bind="@diameterUnit">
            <option selected value="@Diameter.Unit.Mm.ToString()">@Diameter.Unit.Mm.ToString()</option>
            <option value="@Diameter.Unit.Inch.ToString()">@Diameter.Unit.Inch.ToString()</option>
        </select>
      

        <select class="form-control" @onchange="@((args) => OnChange(args))">
            <option selected disabled value=null>Choose diameter</option>
            @foreach (var diameter in diameters)
            {
                <option value="@diameter">@diameter.ToString()</option>
            }
        </select>
    </div>
}

@code {


    private IEnumerable<Diameter> diameters = Enumerable.Empty<Diameter>();
    public Diameter? SelectedDiameter { get; set; }
    private string diameterValue { get; set; }

    private string diameterUnit { get; set; } = Diameter.Unit.Inch.ToString();

    protected override async Task OnInitializedAsync()
    {
        diameters = await MeasurementService.GetAllDiameters();
    }

    private void OnChange(ChangeEventArgs args)
    {
        SelectedDiameter = diameters.FirstOrDefault(d => d.ToString().Equals(args.Value));
    }

    private async Task AddNewDiameter()
    {
        if (!double.TryParse(diameterValue, out double mv))
        {
            //  error placeholder
            return;
        }
        if(!Enum.TryParse<Diameter.Unit>(diameterUnit, out Diameter.Unit unit))
        {
            // error place holder
            return;
        }
        var diameter = new Diameter
            {
                Value = mv,
                UnitType = unit
            };
        await MeasurementService.InsertDiameter(diameter);

        diameters = await MeasurementService.GetAllDiameters();

    }
}
