@page "/fetchdata"

<PageTitle>Ammunition</PageTitle>

@using BulletLibrary
@using BulletLibrary.Interfaces
@using Reloading.Services.EF
@using Reloading.Web.Blazor.Data
@using System.Linq;

@inject IJSRuntime JsRuntime
@inject IManufacturerService ManufacturerService
@inject IBulletService BulletService
@inject IMeasurementService MeasurementService

<h1 style="text-align:center">
    Add Bullet
</h1>

@if (manufactures == Enumerable.Empty<Manufacturer>())
{
    <p><em>Loading...</em></p>
}
    else
{


    <div style="float:right;" >
        <h2 style="text-align:left;">Bullet manufacturer</h2>

        <input type="text" @bind="@NewManufacturerName" @oninput="@((e) => { NewManufacturerName=(string)e.Value;})"/>
        <button type="submit" @onclick="AddNewManufacturer">Submit</button>

        <select class="form-control" @bind="@manufacturerName">
            <option selected disabled value="-1">Choose manufacturer</option>
            @foreach (var manufacturer in manufactures)
            {
                <option value="@manufacturer.Name">@manufacturer.Name</option>
            }
        </select>

        <h2 style="text-align:left;">Mass</h2>

        <input type="text" @bind="@massValue" @oninput="@((e) => { massValue=(string)e.Value;})"/>
        <select class="form-control" @bind="@massUnit">
            <option selected value="@Mass.Unit.Grain.ToString()">@Mass.Unit.Grain.ToString()</option>
            <option value="@Mass.Unit.Gram.ToString()">@Mass.Unit.Gram.ToString()</option>
        </select>
        <button type="submit" @onclick="AddNewMass">Submit</button>

        <select class="form-control" @bind="@mass">
            <option selected disabled value="-1">Choose mass</option>
            @foreach (var mass in masses)
            {
                <option value="@mass.ToString()">@mass.ToString()</option>
            }

        </select>
          <h2 style="text-align:left;">Diameter</h2>

        <input type="text" @bind="@diameterValue" @oninput="@((e) => { diameterValue=(string)e.Value;})"/>
         <button type="submit" @onclick="AddNewDiameter">Submit</button>

        <select class="form-control" @bind="@diameterUnit">
            <option selected value="@Diameter.Unit.Mm.ToString()">@Diameter.Unit.Mm.ToString()</option>
            <option value="@Diameter.Unit.Inch.ToString()">@Diameter.Unit.Inch.ToString()</option>
        </select>
      

        <select class="form-control" @bind="@diameter">
            <option selected disabled value="-1">Choose diameter</option>
            @foreach (var diameter in diameters)
            {
                <option value="@diameter.ToString()">@diameter.ToString()</option>
            }
        </select>
    </div>

      <div style="float:left;">
        <h1 style="text-align:left;">Bullet details</h1>
        <p>
       
        </p>
            <p>
             <label type="text" >
             Manufacturer name: @manufacturerName
             </label>
        </p>
          <p>
             <label type="text" >
            Bullet mass: @mass
             </label>
        </p>
          <p>
              <label type="text" >
                  Diameter: @diameter
              </label>
        </p>
                <label type="text" >
                 Bullet name: 
                </label>
              <input type="text" @bind="@bulletName" @oninput="@((e) => { NewBullet=(string)e.Value;})"/>
              <button type="submit" @onclick="AddNewBullet">Submit</button>

       </div>
}

@code {
    private IEnumerable<Manufacturer> manufactures = Enumerable.Empty<Manufacturer>();
    private IEnumerable<Bullet> bullets = Enumerable.Empty<Bullet>();
    private IEnumerable<Mass> masses = Enumerable.Empty<Mass>();
    private IEnumerable<Diameter> diameters = Enumerable.Empty<Diameter>();

    private string NewManufacturerName {get;set;} = string.Empty;
    private string NewBullet { get; set; } = string.Empty;

    private string manufacturerName { get; set; }
    private string mass { get; set; }
    private string diameter { get; set; }
    private string diameterValue { get; set; }
    private string massValue { get; set; }
    private string bulletName { get; set; }

    private string diameterUnit { get; set; } = Diameter.Unit.Inch.ToString();
    private string massUnit { get; set; } = Mass.Unit.Grain.ToString();

    protected override async Task OnInitializedAsync()
    {
        manufactures = await ManufacturerService.GetAll();
        bullets = await BulletService.GetAll();
        masses = await MeasurementService.GetAllMasses();
        diameters = await MeasurementService.GetAllDiameters();
    }

    private async Task AddNewManufacturer()
    {
        await ManufacturerService.Insert(new Manufacturer
            {
                Name = NewManufacturerName
            });

        manufactures = await ManufacturerService.GetAll();
    }

    private async Task AddNewMass()
    {
        if (!double.TryParse(massValue, out double mv))
        {
            // error
            return;
        }

        if (!Enum.TryParse<Mass.Unit>(massUnit, out Mass.Unit unit))
        {
            // error
            return;
        }

        var mass = new Mass
            {
                Value = mv,
                UnitType = unit
            };

        await MeasurementService.InsertMass(mass);

        masses = await MeasurementService.GetAllMasses();
    }

    private async Task AddNewDiameter()
    {
        if (!double.TryParse(diameterValue, out double mv))
        {
            //  error placeholder
            return;
        }
        if(!Enum.TryParse<Diameter.Unit>(diameterUnit, out Diameter.Unit unit))
        {
            // error place holder
            return;
        }
        var diameter = new Diameter
            {
                Value = mv,
                UnitType = unit
            };
        await MeasurementService.InsertDiameter(diameter);

        diameters = await MeasurementService.GetAllDiameters();
    }

    private async Task AddNewBullet()
    {
        if (string.IsNullOrWhiteSpace(bulletName))
        {
            return;
        }

        var manufacturer = manufactures.FirstOrDefault(m => m.Name!.Equals(manufacturerName));
        if (manufacturer == null)
        {
            //await JsRuntime.InvokeAsync<bool>("Error", "Manufacturer is not selected.");
            return;
        }

        var d = diameters.FirstOrDefault(d => d.ToString().Equals(diameter));
        //Diameter diameter = null;
        if (d == null)
        {
            return;
        }

        var m = masses.FirstOrDefault(m2 => m2.ToString().Equals(mass));
        if (m == null) 
        {
            return;
        }

        var bullet = new Bullet
        {
            Name = NewBullet,
            Manufacturer = manufacturer,
            Diameter = d,
            Mass = m
        };
        try
        {
            await BulletService.Insert(bullet);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        bullets = await BulletService.GetAll();
    }
}
