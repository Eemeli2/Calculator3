@page "/fetchdata"

<PageTitle>Ammunition</PageTitle>

@using BulletLibrary
@using BulletLibrary.Interfaces
@using Microsoft.AspNetCore.Http.Extensions
@using Reloading.Services.EF
@using Reloading.Web.Blazor.Data
@using System.Linq;

@inject NavigationManager UriHelper
@inject IJSRuntime JsRuntime
@inject IManufacturerService ManufacturerService
@inject IBulletService BulletService
@inject IMeasurementService MeasurementService


<h1 style="text-align:center">
    Title placeholder
</h1>

@if (bullets == Enumerable.Empty<Bullet>())
{
    <p><em>Loading...</em></p>
}
    else
{
    <h2 style="float:right"> Add bullet </h2>

    <div style="position:absolute; right:20px; top:200px;">
     <ManufacturerComponent @ref="manufacturerComponent" ManufacturerChangedEvent="ManufacturerUpdated" />
    </div>

    <div style="position:absolute; right:20px; top:310px;"> 
     <DiameterComponent @ref="diameterComponent" DiameterChangedEvent="DiameterUpdated"/>
    </div>

   <div style="position:absolute; right:20px; top:450px;">
     <MassComponent @ref="massComponent" MassChangedEvent="MassUpdated" />
    </div>


    <h2 style="float:left"> Bullet Details </h2>

    <div style="position:absolute; left:280px; top: 210px;"> Manufacturer:@manufacturerComponent?.SelectedManufacturer?.ToString() </div>
    <div  style="position:absolute; left:280px; top: 260px;"> Diameter: @diameterComponent?.SelectedDiameter?.ToString()</div>
    <div style="position:absolute; left:280px; top: 310px;"> Mass: @massComponent?.SelectedMass?.ToString() </div>
    



    <div style="position:absolute; left:280px; top: 350px;">
        <label> Bullet name:</label>

              <input type="text" @bind="@bulletName" @oninput="@((e) => { NewBullet=(string)e.Value;})"/>
              <button type="submit" @onclick="AddNewBullet">Submit</button>
     </div>

}
@code {

    private DiameterComponent? diameterComponent;
    private MassComponent? massComponent;
    private ManufacturerComponent? manufacturerComponent;

    private IEnumerable<Bullet> bullets = Enumerable.Empty<Bullet>();

    private string NewBullet { get; set; } = string.Empty;
    private string bulletName { get; set; }


    protected override async Task OnInitializedAsync()
    {
        bullets = await BulletService.GetAll();  
    }

    void DiameterUpdated(Diameter args)
    {
        StateHasChanged();    
    }

    void MassUpdated(Mass args)
    {
        StateHasChanged();
    }

    void ManufacturerUpdated (Manufacturer args)
    {
        StateHasChanged();
    }

    private async Task AddNewBullet()
    {
        if (string.IsNullOrWhiteSpace(bulletName))
        {
            return;
        }

        if (manufacturerComponent?.SelectedManufacturer == null)
        {
            return;
        }

        if (massComponent?.SelectedMass == null)
        {
            return;
        }

        if (diameterComponent?.SelectedDiameter == null)
        {
            return;
        }

        var bullet = new Bullet
        {
            Name = NewBullet,
            Manufacturer = manufacturerComponent!.SelectedManufacturer,
            Diameter = diameterComponent!.SelectedDiameter,
            Mass = massComponent!.SelectedMass
        };
        try
        {
            await BulletService.Insert(bullet);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        bullets = await BulletService.GetAll();
    }
}
