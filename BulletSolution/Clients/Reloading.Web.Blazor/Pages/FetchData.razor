@page "/fetchdata"

<PageTitle>Ammunition</PageTitle>

@using BulletLibrary
@using BulletLibrary.Interfaces
@using Reloading.Services.EF
@using Reloading.Web.Blazor.Data
@using System.Linq;


@inject IJSRuntime JsRuntime
@inject IManufacturerService ManufacturerService
@inject IBulletService BulletService
@inject IMeasurementService MeasurementService

<h1 style="text-align:center">
    Add Bullet
</h1>

@if (bullets == Enumerable.Empty<Bullet>())
{
    <p><em>Loading...</em></p>
}
    else
{

          <ManufacturerComponent @ref="manufacturerComponent"/>

         <DiameterComponent @ref="diameterComponent"/>

         <MassComponent @ref="massComponent"/>

        
   


    <div style="float:left">
        <p></p>
        <label> Bullet name:</label>

              <input type="text" @bind="@bulletName" @oninput="@((e) => { NewBullet=(string)e.Value;})"/>
              <button type="submit" @onclick="AddNewBullet">Submit</button>
     </div>

      
       
      


}

@code {

    private DiameterComponent? diameterComponent;
    private MassComponent? massComponent;
    private ManufacturerComponent? manufacturerComponent;
    private IEnumerable<Bullet> bullets = Enumerable.Empty<Bullet>();

    private string NewBullet { get; set; } = string.Empty;

    private string bulletName { get; set; }


    protected override async Task OnInitializedAsync()
    {
        bullets = await BulletService.GetAll();
    }

    private async Task AddNewBullet()
    {
        if (string.IsNullOrWhiteSpace(bulletName))
        {
            return;
        }

        if (manufacturerComponent?.SelectedManufacturer == null)
        {
            return;
        }

        if (massComponent?.SelectedMass == null)
        {
            return;
        }

        if (diameterComponent?.SelectedDiameter == null)
        {
            return;
        }

        var bullet = new Bullet
        {
            Name = NewBullet,
            Manufacturer = manufacturerComponent!.SelectedManufacturer,
            Diameter = diameterComponent!.SelectedDiameter,
            Mass = massComponent!.SelectedMass
        };
        try
        {
            await BulletService.Insert(bullet);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        bullets = await BulletService.GetAll();
    }
}
